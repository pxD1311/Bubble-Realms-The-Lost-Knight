[gd_scene load_steps=49 format=3 uid="uid://b4vux1w3on4xj"]

[ext_resource type="PackedScene" uid="uid://vcqoa87imy2i" path="res://scenes/projectile.tscn" id="1_ripu8"]
[ext_resource type="Texture2D" uid="uid://15dlunkhfeke" path="res://assets/images/player/AnimationSheet_Character.png" id="2_3af8f"]

[sub_resource type="GDScript" id="GDScript_7woi2"]
script/source = "extends CharacterBody2D

# Movement parameters
@export var move_speed := 300.0
@export var jump_force := -300.0
@export var gravity := 980.0
@export var crouch_speed := 250.0
@export var water_blast_scene : PackedScene
@export var attack_cooldown := 1.0

# Combat parameters
@export var melee_cooldown := 0.1
var can_melee := true
var is_attacking := false
var can_attack := true

# Animation states
enum {IDLE, RUN, JUMP, CROUCH, MELEE}
var state := IDLE
var facing_right := true

@onready var animated_sprite := $AnimatedSprite2D2
@onready var collision_stand := $CollisionStand2
@onready var collision_crouch := $CollisionCrouch2

func _physics_process(delta):
	handle_input()
	handle_movement(delta)
	update_animation()
	move_and_slide()
	player_level_up()

func handle_input():
	# Melee attack
	if Input.is_action_just_pressed(\"melee\") and can_melee and is_on_floor():
		start_melee_attack()

func handle_movement(delta):
	var input_dir = Input.get_axis(\"move_left\", \"move_right\")
	if input_dir != 0:
		facing_right = input_dir > 0
		$AnimatedSprite2D2.flip_h = !facing_right
	
	# Horizontal movement
	if not is_attacking:
		if Input.is_action_pressed(\"crouch\") and is_on_floor():
			handle_crouch(input_dir, delta)
		else:
			handle_stand_movement(input_dir, delta)
	
	# Jumping
	if Input.is_action_just_pressed(\"jump\") and is_on_floor() and !is_attacking:
		velocity.y = jump_force
		state = JUMP
	
	# Apply gravity
	if not is_on_floor():
		velocity.y += gravity * delta

func handle_crouch(input_dir, delta):
	state = CROUCH
	collision_stand.disabled = true
	collision_crouch.disabled = false
	velocity.x = move_toward(velocity.x, input_dir * crouch_speed, move_speed * delta)

func handle_stand_movement(input_dir, delta):
	collision_stand.disabled = false
	collision_crouch.disabled = true
	velocity.x = move_toward(velocity.x, input_dir * move_speed, move_speed * 2 * delta)
	
	if input_dir != 0:
		facing_right = input_dir > 0
		state = RUN if is_on_floor() else JUMP
	else:
		state = IDLE if is_on_floor() else JUMP

func start_melee_attack():
	state = MELEE
	is_attacking = true
	can_melee = false
	velocity = Vector2.ZERO
	animated_sprite.play(\"melee_attack\")
	await animated_sprite.animation_finished
	is_attacking = false
	await get_tree().create_timer(melee_cooldown).timeout
	can_melee = true

func _input(event):
	if event.is_action_pressed(\"ranged_attack\") and can_attack:
		shoot_water_blast()

func shoot_water_blast():
	can_attack=false
	$AttackCooldown.start(attack_cooldown)
	
	#Create Projectile
	var blast = water_blast_scene.instantiate()
	blast.direction = Vector2.RIGHT if facing_right else Vector2.LEFT
	
	var muzzle_offset = abs($MuzzlePosition.position.x)
	
	if facing_right:
		blast.position = Vector2(global_position.x + muzzle_offset, global_position.y)
	else:
		blast.position = Vector2(global_position.x - muzzle_offset, global_position.y)
	
	blast.get_node(\"AnimatedSprite2D\").flip_h = !facing_right
	
	#if !facing_right:
		#blast.position.x -= 20
	get_parent().add_child(blast)
	
func _on_attack_cooldown_timeout():
	can_attack= true

func update_animation():
	animated_sprite.flip_h = !facing_right
	
	if is_attacking: return
	
	match state:
		MELEE:
			animated_sprite.play(\"melee_attack\")
		CROUCH:
			animated_sprite.play(\"crouch\")
		JUMP:
			animated_sprite.play(\"jump\")
		RUN:
			animated_sprite.play(\"run\")
		_:
			animated_sprite.play(\"idle\")

func gain_xp(amount):
	GameManager.player_stats[\"xp\"] += amount
	if GameManager.player_stats[\"xp\"] >= xp_to_next_level():
		level_up()

func xp_to_next_level():
	return GameManager.player_stats[\"level\"] * 100  # Example formula

func level_up():
	GameManager.player_stats[\"level\"] += 1
	GameManager.player_stats[\"attack\"] += 5
	GameManager.player_stats[\"hp\"] += 20
	print(\"Leveled up! Current level: \", GameManager.player_stats[\"level\"])

func increase_attack(amount):
	GameManager.player_stats[\"attack\"] += amount
	print(\"Attack increased by \", amount, \". Current attack: \", GameManager.player_stats[\"attack\"])

func deal_damage_to_enemy(enemy_hp, critical_hit_chance = 0.1):
	var damage = GameManager.player_stats[\"attack\"]
	if randf() < critical_hit_chance:  # 10% chance for a critical hit
		damage *= 2
		print(\"Critical hit!\")
	enemy_hp -= damage
	print(\"Dealt \", damage, \" damage. Enemy HP left: \", enemy_hp)
	return enemy_hp  # Return remaining enemy HP

func take_damage(amount):
	GameManager.player_stats[\"hp\"] -= amount
	if GameManager.player_stats[\"hp\"] <= 0:
		GameManager.handle_kill_zone(self)
		# Trigger game over logic here
	else:
		print(\"Player took \", amount, \" damage. HP: \", GameManager.player_stats[\"hp\"])

func heal_player(amount, max_hp = 200):
	GameManager.player_stats[\"hp\"] += amount
	if GameManager.player_stats[\"hp\"] > max_hp:
		GameManager.player_stats[\"hp\"] = max_hp
	print(\"Player healed by \", amount, \". HP: \", GameManager.player_stats[\"hp\"])

func revive_player(revive_hp = 50):
	if GameManager.player_stats[\"hp\"] == 0:
		GameManager.player_stats[\"hp\"] = revive_hp
		print(\"Player revived! HP: \", GameManager.player_stats[\"hp\"])
	else:
		print(\"Player is not dead. Revival skipped.\")

func increase_score(points):
	GameManager.player_score += points
	print(\"Score increased by \", points, \". Current score: \", GameManager.player_score)

func decrease_score(points):
	GameManager.player_score -= points
	if GameManager.player_score < 0:
		GameManager.player_score = 0
	print(\"Score decreased by \", points, \". Current score: \", GameManager.player_score)

func reset_score():
	GameManager.player_score = 0
	print(\"Score reset. Current score: \", GameManager.player_score)

func is_player_dead():
	return GameManager.player_stats[\"hp\"] <= 0
	
func get_player_stats():
	print(\"Player Stats: \", GameManager.player_stats)
	return GameManager.player_stats
	
func player_level_up():
	if GameManager.player_stats[\"xp\"] > 50:
		GameManager.player_stats[\"level\"]+=1 
		GameManager.player_stats[\"xp\"] = 0
"

[sub_resource type="AtlasTexture" id="AtlasTexture_8e1el"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_rr4us"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_hj5cv"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_f11ij"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_q0t87"]
atlas = ExtResource("2_3af8f")
region = Rect2(128, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_5hywf"]
atlas = ExtResource("2_3af8f")
region = Rect2(160, 128, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_rsx07"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ii1qd"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_umey4"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_toj2t"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_hcc2w"]
atlas = ExtResource("2_3af8f")
region = Rect2(128, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_3dvew"]
atlas = ExtResource("2_3af8f")
region = Rect2(160, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_jdrgy"]
atlas = ExtResource("2_3af8f")
region = Rect2(192, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_qvg55"]
atlas = ExtResource("2_3af8f")
region = Rect2(224, 224, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_xwrwx"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_4tyf2"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_8ok2m"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_05g47"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_pywwh"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_88w5y"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_42mgv"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_06n44"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_xhh2x"]
atlas = ExtResource("2_3af8f")
region = Rect2(128, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_63fbv"]
atlas = ExtResource("2_3af8f")
region = Rect2(160, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_gsn3t"]
atlas = ExtResource("2_3af8f")
region = Rect2(192, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_c4fsk"]
atlas = ExtResource("2_3af8f")
region = Rect2(224, 160, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_vvtuu"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_8y6m8"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_hy8wr"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_w8p2v"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_urywu"]
atlas = ExtResource("2_3af8f")
region = Rect2(128, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_jsjq6"]
atlas = ExtResource("2_3af8f")
region = Rect2(160, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_5gfap"]
atlas = ExtResource("2_3af8f")
region = Rect2(192, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_7a5hu"]
atlas = ExtResource("2_3af8f")
region = Rect2(224, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_2hsdy"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_m3w5r"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_rakdp"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_68ssw"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 256, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_fapyp"]
atlas = ExtResource("2_3af8f")
region = Rect2(0, 64, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_0bpas"]
atlas = ExtResource("2_3af8f")
region = Rect2(32, 64, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_jh8rd"]
atlas = ExtResource("2_3af8f")
region = Rect2(64, 64, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_doprv"]
atlas = ExtResource("2_3af8f")
region = Rect2(96, 64, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_62bf1"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_8e1el")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rr4us")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hj5cv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f11ij")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q0t87")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5hywf")
}],
"loop": false,
"name": &"crouch",
"speed": 8.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rsx07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ii1qd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_umey4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_toj2t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hcc2w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3dvew")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jdrgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qvg55")
}],
"loop": false,
"name": &"dying",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_xwrwx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4tyf2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8ok2m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_05g47")
}],
"loop": true,
"name": &"idle",
"speed": 3.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pywwh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_88w5y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_42mgv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_06n44")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xhh2x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_63fbv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gsn3t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_c4fsk")
}],
"loop": false,
"name": &"jump",
"speed": 8.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vvtuu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8y6m8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hy8wr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w8p2v")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_urywu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jsjq6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5gfap")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7a5hu")
}],
"loop": false,
"name": &"melee_attack",
"speed": 12.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2hsdy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_m3w5r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rakdp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_68ssw")
}],
"loop": true,
"name": &"ranged_attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fapyp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0bpas")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jh8rd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_doprv")
}],
"loop": true,
"name": &"run",
"speed": 8.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_4pkp5"]
radius = 8.0
height = 26.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_tx1a1"]
radius = 8.0
height = 16.0

[node name="Character" type="CharacterBody2D" groups=["player"]]
collision_mask = 11
script = SubResource("GDScript_7woi2")
water_blast_scene = ExtResource("1_ripu8")

[node name="AnimatedSprite2D2" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_62bf1")
animation = &"jump"
autoplay = "idle"

[node name="CollisionStand2" type="CollisionShape2D" parent="."]
position = Vector2(-1, 2)
shape = SubResource("CapsuleShape2D_4pkp5")

[node name="CollisionCrouch2" type="CollisionShape2D" parent="."]
position = Vector2(-1, 7)
shape = SubResource("CapsuleShape2D_tx1a1")
disabled = true

[node name="MuzzlePosition" type="Marker2D" parent="."]
position = Vector2(8, 2)
rotation = -0.00541923
scale = Vector2(0.92, 1)

[node name="AttackCooldown" type="Timer" parent="."]
wait_time = 0.7

[connection signal="timeout" from="AttackCooldown" to="." method="_on_attack_cooldown_timeout"]
